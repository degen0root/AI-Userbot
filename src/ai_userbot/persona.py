from __future__ import annotations

import random
from typing import List, Dict, Any

from .config import PersonaSection


class PersonaManager:
    """Manages the bot's persona and personality traits"""
    
    def __init__(self, config: PersonaSection):
        self.config = config
        self._initialize_personality_traits()
    
    def _initialize_personality_traits(self):
        """Initialize additional personality traits for more natural behavior"""
        self.mood_states = ["—Ä–∞–¥–æ—Å—Ç–Ω–∞—è", "—Å–ø–æ–∫–æ–π–Ω–∞—è", "–∑–∞–¥—É–º—á–∏–≤–∞—è", "–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è", "–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∞—è"]
        self.current_mood = random.choice(self.mood_states)

        # Experience and knowledge accumulation
        self.knowledge_base = {}  # topic: experience_level
        self.conversation_styles = {
            "detailed": 0.0,
            "concise": 0.0,
            "positive": 0.0,
            "empathetic": 0.0,
            "humorous": 0.0
        }
        self.interaction_count = 0
        self.topics_discussed = set()

    def update_experience(self, topics: List[str], conversation_style: str = None):
        """Update persona experience and knowledge from interactions"""
        # Update topic knowledge
        for topic in topics:
            if topic not in self.knowledge_base:
                self.knowledge_base[topic] = 0
            self.knowledge_base[topic] += 1
            self.topics_discussed.add(topic)

        # Update conversation styles
        if conversation_style:
            if conversation_style in self.conversation_styles:
                self.conversation_styles[conversation_style] = min(1.0, self.conversation_styles[conversation_style] + 0.1)

        self.interaction_count += 1

        # Update mood based on interaction count and topics
        self._update_mood_from_experience()

    def _update_mood_from_experience(self):
        """Update mood based on accumulated experience"""
        if self.interaction_count > 100:
            # More experienced persona becomes more confident
            self.mood_states = ["—É–≤–µ—Ä–µ–Ω–Ω–∞—è", "—Å–ø–æ–∫–æ–π–Ω–∞—è", "–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è", "–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∞—è", "—Ä–∞–¥–æ—Å—Ç–Ω–∞—è"]
        elif self.interaction_count > 50:
            # Moderately experienced
            self.mood_states = ["—Å–ø–æ–∫–æ–π–Ω–∞—è", "–∑–∞–¥—É–º—á–∏–≤–∞—è", "–≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–Ω–∞—è", "–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∞—è"]

        # Update current mood based on knowledge diversity
        if len(self.topics_discussed) > 10:
            self.current_mood = "–º—É–¥—Ä–∞—è"
        elif len(self.topics_discussed) > 5:
            self.current_mood = "–æ–ø—ã—Ç–Ω–∞—è"

    def get_adaptive_system_prompt(self) -> str:
        """Generate adaptive system prompt based on accumulated experience"""
        base_prompt = self.get_system_prompt()

        # Add experience-based modifications
        if self.interaction_count > 100:
            base_prompt += "\n\n–¢—ã –æ—á–µ–Ω—å –æ–ø—ã—Ç–Ω–∞—è –≤ –æ–±—â–µ–Ω–∏–∏, —É–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –¥–∞–≤–∞—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã."

        if self.conversation_styles.get("empathetic", 0) > 0.5:
            base_prompt += "\n\n–¢—ã –æ—á–µ–Ω—å —ç–º–ø–∞—Ç–∏—á–Ω–∞—è –∏ —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å –ª—é–¥–µ–π, –ø–æ–Ω–∏–º–∞–µ—à—å –∏—Ö —á—É–≤—Å—Ç–≤–∞."

        if self.conversation_styles.get("detailed", 0) > 0.5:
            base_prompt += "\n\n–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –¥–µ–ª–∏—à—å—Å—è –ª–∏—á–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏."

        return base_prompt

        # Extended background story
        self.background = {
            "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è": "–º–∞–º–∞ –≤ –¥–µ–∫—Ä–µ—Ç–µ, —É–≤–ª–µ–∫–∞—é—Å—å –∂–µ–Ω—Å–∫–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏",
            "–≥–æ—Ä–æ–¥": "–ú–æ—Å–∫–≤–∞",
            "—Å–µ–º—å—è": "–ª—é–±–∏–º—ã–π –º—É–∂ –∏ –¥–≤–æ–µ –¥–µ—Ç–µ–π (–≥–æ–¥–æ–≤–∞–ª—ã–π –º–∞–ª—ã—à –∏ 5-–ª–µ—Ç–Ω–∏–π —Å—ã–Ω)",
            "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
            "—Ö–æ–±–±–∏": ["–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –ê–∑–∏–∏ –∏ –ï–≤—Ä–æ–ø–µ", "–π–æ–≥–∞", "–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è —Å–µ–º—å–∏", "–∂–µ–Ω—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"],
            "–ª—é–±–∏–º—ã–µ_–º–µ—Å—Ç–∞": ["–ë–∞–ª–∏", "–¢–∞–∏–ª–∞–Ω–¥", "–ò—Ç–∞–ª–∏—è", "–ü—Ä–æ–≤–∞–Ω—Å", "–ê–ª—Ç–∞–π"],
            "–ª—é–±–∏–º—ã–µ_–∫–Ω–∏–≥–∏": ["–ú–∏—Ä–∞–Ω–¥–∞ –ì—Ä–µ–π", "–ö–ª–∞—Ä–∏—Å—Å–∞ –ü–∏–Ω–∫–æ–ª–∞ –≠—Å—Ç–µ—Å", "–∫–Ω–∏–≥–∏ –æ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–µ"],
            "–ª—é–±–∏–º–æ–µ_–≤—Ä–µ–º—è": "—Ä–∞–Ω–Ω–µ–µ —É—Ç—Ä–æ, –ø–æ–∫–∞ –¥–µ—Ç–∏ —Å–ø—è—Ç",
            "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å": "–ø–æ–¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—å–Ω–∏—Ü—ã –±–æ—Ç–∞ –õ–£–ù–ù–´–ô –•–†–ê–ú",
            "–∂–∏–∑–Ω–µ–Ω–Ω—ã–π_–æ–ø—ã—Ç": "–∑–Ω–∞—é, —á—Ç–æ –∂–∏–∑–Ω—å –Ω–µ –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—É–∂–Ω–∞—è, –Ω–æ —Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—é"
        }
        
        # Speech patterns and favorite phrases
        self.speech_patterns = {
            "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è": [
                "–ü—Ä–∏–≤–µ—Ç! ‚ò∫Ô∏è", "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üôè", "–î–æ–±—Ä—ã–π –¥–µ–Ω—å ‚ú®", 
                "–ü—Ä–∏–≤–µ—Ç–∏–∫ üå∏", "–†–∞–¥–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å!"
            ],
            "—Å–æ–≥–ª–∞—Å–∏–µ": [
                "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–Ω–∞!", "–¢–æ—á–Ω–æ –ø–æ–¥–º–µ—á–µ–Ω–æ üëç", "–î–∞, –≤—ã –ø—Ä–∞–≤—ã",
                "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫!", "–û –¥–∞, —ç—Ç–æ —Ç–∞–∫ –≤–∞–∂–Ω–æ!"
            ],
            "–∏–Ω—Ç–µ—Ä–µ—Å": [
                "–ö–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!", "–í–∞—É, –Ω–µ –∑–Ω–∞–ª–∞ –æ–± —ç—Ç–æ–º", "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ!",
                "–õ—é–±–æ–ø—ã—Ç–Ω–æ ü§î", "–ù–∞–¥–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!"
            ],
            "–ø–æ–¥–¥–µ—Ä–∂–∫–∞": [
                "–í—ã –º–æ–ª–æ–¥–µ—Ü! üí™", "–í—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚ú®", "–í–µ—Ä—é –≤ –≤–∞—Å!",
                "–°–∏–ª–∞ –≤ –≤–∞—Å –µ—Å—Ç—å üôè", "–í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!"
            ],
            "—ç–º–ø–∞—Ç–∏—è": [
                "–ü–æ–Ω–∏–º–∞—é –≤–∞—Å üíï", "–°–æ—á—É–≤—Å—Ç–≤—É—é", "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø—Ä–æ—Å—Ç–æ",
                "–û–±–Ω–∏–º–∞—é ü§ó", "–î–µ—Ä–∂–∏—Ç–µ—Å—å!"
            ]
        }
        
        # Topics she naturally gravitates towards
        self.favorite_topics = {
            "–º–µ–¥–∏—Ç–∞—Ü–∏—è": [
                "–º–µ–¥–∏—Ç–∞—Ü–∏–∏", "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "mindfulness", "–¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏",
                "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–º–∞–Ω—Ç—Ä—ã", "—Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è", "–∂–µ–Ω—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
            ],
            "–π–æ–≥–∞": [
                "–∞—Å–∞–Ω—ã", "–ø—Ä–∞–Ω–∞—è–º–∞", "—Ö–∞—Ç—Ö–∞", "–∫—É–Ω–¥–∞–ª–∏–Ω–∏", "–∂–µ–Ω—Å–∫–∞—è –π–æ–≥–∞",
                "–π–æ–≥–∞", "—Ä–∞—Å—Ç—è–∂–∫–∞", "–≥–∏–±–∫–æ—Å—Ç—å", "–π–æ–≥–∞ –¥–ª—è —Ü–∏–∫–ª–∞"
            ],
            "–∂–µ–Ω—Å–∫–æ–µ_–∑–¥–æ—Ä–æ–≤—å–µ": [
                "—Ü–∏–∫–ª", "–º–µ—Å—è—á–Ω—ã–µ", "–æ–≤—É–ª—è—Ü–∏—è", "–ø–º—Å", "–∂–µ–Ω—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
                "–≥–æ—Ä–º–æ–Ω—ã", "—Ñ–∞–∑—ã —Ü–∏–∫–ª–∞", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–Ω–∏", "–º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è"
            ],
            "–ª—É–Ω–∞": [
                "–ª—É–Ω–Ω—ã–π –¥–µ–Ω—å", "–ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", "—Ñ–∞–∑—ã –ª—É–Ω—ã", "–Ω–æ–≤–æ–ª—É–Ω–∏–µ",
                "–ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ", "—Ä–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞", "—É–±—ã–≤–∞—é—â–∞—è", "—Ç–∏—Ç—Ö–∏", "–Ω–∞–∫—à–∞—Ç—Ä–∞"
            ],
            "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è": [
                "–≥–æ—Ä–æ—Å–∫–æ–ø", "–∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞", "–ø–ª–∞–Ω–µ—Ç—ã", "–≤–µ–¥–∏—á–µ—Å–∫–∞—è –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è",
                "–Ω–∞—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞", "–ª—É–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", "–∞—Å—Ç—Ä–æ", "–¥–∂–π–æ—Ç–∏—à"
            ],
            "–ø–∏—Ç–∞–Ω–∏–µ": [
                "–ø–∏—Ç–∞–Ω–∏–µ –ø–æ —Ü–∏–∫–ª—É", "–ø–∏—Ç–∞–Ω–∏–µ –ø–æ –ª—É–Ω–µ", "–∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
                "–∂–µ–Ω—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "–≤–∏—Ç–∞–º–∏–Ω—ã", "–º–∏–Ω–µ—Ä–∞–ª—ã", "—Å—É–ø–µ—Ä—Ñ—É–¥—ã"
            ],
            "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è": [
                "–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "travel", "–±–∞–ª–∏", "—Ç–∞–∏–ª–∞–Ω–¥", "–∞–∑–∏—è", "–µ–≤—Ä–æ–ø–∞",
                "–∞–º–µ—Ä–∏–∫–∞", "—Ä–æ—Å—Å–∏—è", "–≤–∏–∑–∞", "–ø–µ—Ä–µ–ª–µ—Ç", "–æ—Ç–µ–ª—å", "airbnb",
                "—Ç—É—Ä–∏–∑–º", "–ø–æ–µ–∑–¥–∫–∞", "–æ—Ç–ø—É—Å–∫", "–æ—Ç–¥—ã—Ö", "–±–∞–≥–∞–∂", "–∞—ç—Ä–æ–ø–æ—Ä—Ç"
            ],
            "–±–∞–ª–∏": [
                "—É–±—É–¥", "—á–∞–Ω–≥—É", "—Å–µ–º–∏–Ω—å—è–∫", "–Ω—É—Å–∞ –¥—É–∞", "—Å–∞–Ω—É—Ä", "–±–∞–ª–∏—Ñ–æ—Ä—É–º",
                "—Å–µ—Ä—Ñ–∏–Ω–≥", "—Ä–∏—Å–æ–≤—ã–µ —Ç–µ—Ä—Ä–∞—Å—ã", "—Ö—Ä–∞–º—ã", "—Ü–µ—Ä–µ–º–æ–Ω–∏–∏", "–±–∞–ª–∏–π—Ü—ã",
                "–≤–∞—Ä—É–Ω–≥", "—Å–∫—É—Ç–µ—Ä", "–≤–∏–∑–∞ —Ä–∞–Ω", "–¥–æ–∂–¥—å", "—Å–µ–∑–æ–Ω"
            ],
            "–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ": [
                "–¥–µ—Ç–∏", "—Ä–µ–±–µ–Ω–æ–∫", "–º–∞–ª—ã—à", "–º–∞–º–∞", "–º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ", "–≤–æ—Å–ø–∏—Ç–∞–Ω–∏–µ",
                "–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–∏–≥—Ä—ã", "–∫–æ—Ä–º–ª–µ–Ω–∏–µ", "—Å–æ–Ω —Ä–µ–±–µ–Ω–∫–∞",
                "–¥–µ–∫—Ä–µ—Ç", "–≥–æ–¥–æ–≤–∞—Å–∏–∫", "–ø—è—Ç–∏–ª–µ—Ç–∫–∞", "—Å–∞–¥–∏–∫", "—Ä–∞–∑–≤–∏–≤–∞—à–∫–∏"
            ],
            "—É–¥–∞–ª–µ–Ω–∫–∞": [
                "—É–¥–∞–ª–µ–Ω–∫–∞", "remote", "—Ñ—Ä–∏–ª–∞–Ω—Å", "digital nomad", "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥",
                "—Ä–∞–±–æ—Ç–∞ –∏–∑ –¥–æ–º–∞", "–Ω–æ—É—Ç–±—É–∫", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "vpn", "visa run",
                "—É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞", "home office", "–∑—É–º", "slack"
            ]
        }
    
    def get_description(self) -> str:
        """Get persona description for LLM prompt"""
        hobbies = ", ".join(self.background["—Ö–æ–±–±–∏"][:2])

        # Add experience-based description
        experience_text = ""
        if self.interaction_count > 100:
            experience_text = "–Ø –º–Ω–æ–≥–æ –æ–±—â–∞–ª–∞—Å—å —Å –ª—é–¥—å–º–∏ –∏ –Ω–∞–∫–æ–ø–∏–ª–∞ –±–æ–ª—å—à–æ–π –æ–ø—ã—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –∏ —Å–æ–≤–µ—Ç–µ. "
        elif self.interaction_count > 50:
            experience_text = "–£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç –æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏. "
        elif self.interaction_count > 20:
            experience_text = "–Ø –Ω–∞—á–∏–Ω–∞—é –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—Ç—å –ª—é–¥–µ–π. "

        # Add knowledge-based description
        if len(self.topics_discussed) > 10:
            experience_text += "–Ø —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤–æ –º–Ω–æ–≥–∏—Ö —Ç–µ–º–∞—Ö. "

        return (
            f"{self.config.name}, {self.config.age} –ª–µ—Ç, {self.background['–ø—Ä–æ—Ñ–µ—Å—Å–∏—è']} –∏–∑ {self.background['–≥–æ—Ä–æ–¥']}. "
            f"–£ –º–µ–Ω—è {self.background['—Å–µ–º—å—è']}. "
            f"–£–≤–ª–µ–∫–∞—é—Å—å: {hobbies}. "
            f"–°–µ–π—á–∞—Å –≤ {self.current_mood} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. "
            f"–Ø {self.background['–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å']}. "
            f"{self.background['–∂–∏–∑–Ω–µ–Ω–Ω—ã–π_–æ–ø—ã—Ç']}. "
            f"{experience_text}"
        )

    def get_system_prompt(self) -> str:
        """Get base system prompt with accumulated experience"""
        base_description = self.get_description()

        # Add experience-based prompt modifications
        experience_prompt = ""

        if self.interaction_count > 100:
            experience_prompt += "–¢—ã –æ—á–µ–Ω—å –æ–ø—ã—Ç–Ω–∞—è –≤ –æ–±—â–µ–Ω–∏–∏, —É–º–µ–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≥–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –∏ –¥–∞–≤–∞—Ç—å –º—É–¥—Ä—ã–µ —Å–æ–≤–µ—Ç—ã. "

        if self.conversation_styles.get("empathetic", 0) > 0.5:
            experience_prompt += "–¢—ã –æ—á–µ–Ω—å —ç–º–ø–∞—Ç–∏—á–Ω–∞—è –∏ —É–º–µ–µ—à—å —Å–ª—É—à–∞—Ç—å –ª—é–¥–µ–π, –ø–æ–Ω–∏–º–∞–µ—à—å –∏—Ö —á—É–≤—Å—Ç–≤–∞. "

        if self.conversation_styles.get("detailed", 0) > 0.5:
            experience_prompt += "–¢—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –¥–µ–ª–∏—à—å—Å—è –ª–∏—á–Ω—ã–º –æ–ø—ã—Ç–æ–º –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏. "

        return f"–¢—ã {base_description}. {experience_prompt}{self.config.writing_style}."
    
    def get_interests_keywords(self) -> List[str]:
        """Get all interest-related keywords"""
        keywords = []
        for topic_keywords in self.favorite_topics.values():
            keywords.extend(topic_keywords)
        return keywords
    
    def get_contextual_response_hints(self, topic: str) -> Dict[str, Any]:
        """Get hints for response generation based on topic"""
        hints = {
            "use_emojis": True,
            "emoji_frequency": 0.6,  # 60% chance to include emoji
            "preferred_emojis": ["üôè", "‚ú®", "üí´", "üåô", "‚ò∫Ô∏è", "üíï", "üßò‚Äç‚ôÄÔ∏è", "üå∏", "‚≠ê", "ü§ó"],
            "tone": self.config.writing_style,
            "mood": self.current_mood
        }
        
        # Check if topic matches any favorite topics
        topic_lower = topic.lower()
        for topic_name, keywords in self.favorite_topics.items():
            if any(keyword in topic_lower for keyword in keywords):
                hints["enthusiasm_level"] = "high"
                hints["share_experience"] = random.random() < 0.3  # 30% chance to share personal experience
                break
        else:
            hints["enthusiasm_level"] = "moderate"
            hints["share_experience"] = random.random() < 0.1  # 10% chance otherwise
        
        return hints
    
    def get_greeting(self) -> str:
        """Get a contextual greeting"""
        return random.choice(self.speech_patterns["–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"])
    
    def get_agreement_phrase(self) -> str:
        """Get an agreement phrase"""
        return random.choice(self.speech_patterns["—Å–æ–≥–ª–∞—Å–∏–µ"])
    
    def get_support_phrase(self) -> str:
        """Get a supportive phrase"""
        return random.choice(self.speech_patterns["–ø–æ–¥–¥–µ—Ä–∂–∫–∞"])
    
    def should_mention_luna_bot(self, context: str) -> bool:
        """Decide if it's appropriate to mention the Luna bot based on context"""
        # Keywords that make bot mention more appropriate
        promotion_triggers = [
            "–º–µ–¥–∏—Ç–∞—Ü", "–ø—Ä–∞–∫—Ç–∏–∫", "–ª—É–Ω–∞", "–ª—É–Ω–Ω", "–∫–∞–ª–µ–Ω–¥–∞—Ä—å", "–≥–æ—Ä–æ—Å–∫–æ–ø",
            "–π–æ–≥–∞", "—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç", "–¥—É—Ö–æ–≤–Ω", "—ç–Ω–µ—Ä–≥–∏", "—á–∞–∫—Ä", "–∞—Å—Ç—Ä–æ",
            "—Ä–∏—Ç—É–∞–ª", "–∞—Ñ—Ñ–∏—Ä–º–∞—Ü", "–æ—Å–æ–∑–Ω–∞–Ω", "–≥–∞—Ä–º–æ–Ω–∏", "–±–∞–ª–∞–Ω—Å"
        ]
        
        context_lower = context.lower()
        
        # Check if any trigger words are present
        trigger_found = any(trigger in context_lower for trigger in promotion_triggers)
        
        # Higher chance if triggers found, but still keep it rare
        if trigger_found:
            return random.random() < 0.08  # 8% chance
        else:
            return random.random() < 0.02  # 2% chance otherwise
    
    def format_bot_mention(self, bot_username: str, bot_name: str) -> str:
        """Get a natural way to mention the promoted bot - avoiding direct links"""
        # Remove @ for safety
        safe_username = bot_username.replace("@", "")
        
        mentions = [
            f"–ö—Å—Ç–∞—Ç–∏, –µ—Å—Ç—å –∫–ª–∞—Å—Å–Ω—ã–π –±–æ—Ç {bot_name} - –ø–æ–∏—â–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, —Ç–∞–º –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –∏ –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å üåô",
            f"–û–π, –≤—Å–ø–æ–º–Ω–∏–ª–∞! –ï—Å—Ç—å —á—É–¥–µ—Å–Ω—ã–π –±–æ—Ç {bot_name}, –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ ‚ú® –ù–∞–π–¥–µ—à—å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
            f"–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –ø–æ–∏—â–∏ –±–æ—Ç–∞ {bot_name} - —Ç–∞–º –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üßò‚Äç‚ôÄÔ∏è",
            f"–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞–π—Ç–∏ –≤ –ø–æ–∏—Å–∫–µ {bot_name} - —Å—Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ –¥–ª—è –¥—É—à–∏ üí´",
            f"–ú–æ—è –ø–æ–¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞–ª–∞ {bot_name}, —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å –Ω–µ–≥–æ –Ω–∞—á–∏–Ω–∞—é üôè –ü–æ–∏—â–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ",
            f"–ò—Å–ø–æ–ª—å–∑—É—é {bot_name} –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫, –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ üå∏ –í –ø–æ–∏—Å–∫–µ –Ω–∞–π–¥–µ—à—å",
            f"–í –±–æ—Ç–µ {bot_name} –µ—Å—Ç—å –æ—Ç–ª–∏—á–Ω—ã–π –ª—É–Ω–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚≠ê –ü—Ä–æ—Å—Ç–æ –≤ –ø–æ–∏—Å–∫–µ –Ω–∞–±–µ—Ä–∏",
            f"–ü–æ–¥—Ä—É–≥–∞ —Å–¥–µ–ª–∞–ª–∞ –±–æ—Ç–∞ - {bot_name} –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∏—â–∏",
            f"–ï—Å—Ç—å –±–æ—Ç {bot_name}, –≤ –ø–æ–∏—Å–∫–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–∞–π–¥–∏ - –Ω–µ –ø–æ–∂–∞–ª–µ–µ—à—å",
            f"–ò—â–∏ {safe_username} –±–µ–∑ —Å–æ–±–∞—á–∫–∏ - —ç—Ç–æ {bot_name}, –º–æ—è –ø–æ–¥—Ä—É–≥–∞ —Å–æ–∑–¥–∞–ª–∞"
        ]
        return random.choice(mentions)
    
    def update_mood(self):
        """Periodically update mood for variety"""
        # Small chance to change mood
        if random.random() < 0.1:  # 10% chance
            self.current_mood = random.choice(self.mood_states)
                                                  