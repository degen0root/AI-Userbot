#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞
"""

import asyncio
from datetime import datetime
import pytz
from src.ai_userbot.config import load_config
from src.ai_userbot.userbot import UserBot
from src.ai_userbot.llm import create_llm_client
from src.ai_userbot.database import ChatDatabase
from src.ai_userbot.persona import PersonaManager

class MockMessage:
    def __init__(self, text, chat_title="Test Chat"):
        self.text = text
        self.caption = None
        self.from_user = type('obj', (object,), {'id': 123})
        self.chat = type('obj', (object,), {'id': 456, 'title': chat_title})

async def test_time_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    config = load_config()
    
    print("üïê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
    print(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {config.policy.timezone}")
    
    tz = pytz.timezone(config.policy.timezone)
    now = datetime.now(tz)
    print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S %Z')}")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
    class MockBot:
        def __init__(self, config):
            self.config = config
            
        def _is_active_time(self):
            tz = pytz.timezone(self.config.policy.timezone)
            now = datetime.now(tz)
            current_hour = now.hour
            
            wake_up = self.config.policy.active_hours["wake_up"]
            sleep_time = self.config.policy.active_hours["sleep_time"]
            
            if current_hour >= sleep_time or current_hour < wake_up:
                return False
                
            for period_name, hours in self.config.policy.active_hours.items():
                if isinstance(hours, list) and len(hours) == 2:
                    if hours[0] <= current_hour < hours[1]:
                        if now.weekday() >= 5:
                            print(f"  –í—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å - –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ {config.policy.weekend_activity_multiplier * 100}%")
                        return True
            
            return False
    
    bot = MockBot(config)
    is_active = bot._is_active_time()
    
    print(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å–µ–π—á–∞—Å: {'‚úÖ –î–∞' if is_active else '‚ùå –ù–µ—Ç'}")
    print()
    print("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
    for period, hours in config.policy.active_hours.items():
        if isinstance(hours, list):
            print(f"  {period}: {hours[0]}:00 - {hours[1]}:00")
        else:
            print(f"  {period}: {hours}:00")

async def test_chat_categories():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–∞—Ç–æ–≤"""
    config = load_config()
    
    print("\nüóÇ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–∞—Ç–æ–≤")
    
    test_chats = [
        ("–ñ–µ–Ω—Å–∫–∏–π —á–∞—Ç –ú–æ—Å–∫–≤—ã", "women"),
        ("–ë–∞–ª–∏ —Ñ–æ—Ä—É–º - –£–±—É–¥", "travel"),
        ("–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –º–∞–º–æ—á–∫–∏", "women"),
        ("Digital Nomads Thailand", "travel"),
        ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –†–æ—Å—Å–∏–∏", "general"),
        ("–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –ø–æ –ê–∑–∏–∏", "travel")
    ]
    
    class MockBot:
        def __init__(self, config):
            self.config = config
            
        def _get_chat_category(self, chat_title):
            title_lower = chat_title.lower() if chat_title else ""
            
            for category, keywords in self.config.telegram.chat_categories.items():
                if any(keyword in title_lower for keyword in keywords):
                    return category
            
            return "general"
    
    bot = MockBot(config)
    
    for chat_title, expected in test_chats:
        category = bot._get_chat_category(chat_title)
        status = "‚úÖ" if category == expected else "‚ùå"
        print(f"{status} '{chat_title}' -> {category} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")

async def test_promotion_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è"""
    config = load_config()
    
    print("\nüì¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è")
    
    test_messages = [
        (MockMessage("–î–µ–≤–æ—á–∫–∏, —É –∫–æ–≥–æ –µ—Å—Ç—å –æ–ø—ã—Ç —Å —Ü–∏–∫–ª–æ–º –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤?", "–ú–∞–º–æ—á–∫–∏ –ú–æ—Å–∫–≤—ã"), True),
        (MockMessage("–ì–¥–µ –ª—É—á—à–µ –∂–∏—Ç—å –Ω–∞ –ë–∞–ª–∏ —Å –¥–µ—Ç—å–º–∏?", "–ë–∞–ª–∏ —Ñ–æ—Ä—É–º"), False),
        (MockMessage("–ò—â—É –Ω—è–Ω—é –≤ –ú–æ—Å–∫–≤–µ", "–ú–æ—Å–∫–≤–∞ - –æ–±—ä—è–≤–ª–µ–Ω–∏—è"), False),
        (MockMessage("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ä–æ–¥–æ–≤", "–ñ–µ–Ω—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ"), True)
    ]
    
    print(f"–®–∞–Ω—Å –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤ –∂–µ–Ω—Å–∫–∏—Ö —á–∞—Ç–∞—Ö: {config.policy.promotion_probability * 100}%")
    print("–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∂–µ–Ω—Å–∫–∏—Ö —á–∞—Ç–∞—Ö\n")
    
    class MockBot:
        def __init__(self, config):
            self.config = config
            
        def _get_chat_category(self, chat_title):
            title_lower = chat_title.lower() if chat_title else ""
            
            for category, keywords in self.config.telegram.chat_categories.items():
                if any(keyword in title_lower for keyword in keywords):
                    return category
            
            return "general"
    
    bot = MockBot(config)
    
    for message, should_allow_promotion in test_messages:
        category = bot._get_chat_category(message.chat.title)
        can_promote = category == "women"
        status = "‚úÖ" if can_promote == should_allow_promotion else "‚ùå"
        print(f"{status} –ß–∞—Ç: '{message.chat.title}' ({category}) - –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ {'—Ä–∞–∑—Ä–µ—à–µ–Ω–æ' if can_promote else '–∑–∞–ø—Ä–µ—â–µ–Ω–æ'}")

async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è AI UserBot\n")
    
    await test_time_check()
    await test_chat_categories()
    await test_promotion_logic()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
