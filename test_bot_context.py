#!/usr/bin/env python3
"""
Test script to verify promoted bot context and generate sample mentions
"""

import sys
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel

# Add src to path
sys.path.insert(0, str(Path(__file__).parent))

from src.ai_userbot.promoted_bot_context import (
    get_bot_context, 
    get_relevant_features, 
    generate_natural_mention,
    is_relevant_to_audience
)

console = Console()


def test_context():
    """Test bot context configuration"""
    console.print("\n[bold cyan]ü§ñ Testing Moon Temple Bot Context[/bold cyan]\n")
    
    # Get context
    context = get_bot_context()
    
    # Display basic info
    info_panel = Panel(
        f"[bold]Bot:[/bold] {context['username']} ({context['name']})\n"
        f"[bold]Description:[/bold] {context['description']}\n"
        f"[bold]Features:[/bold] {len(context['main_features'])} –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π\n"
        f"[bold]Target:[/bold] {len(context['target_audience'])} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
        title="–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        expand=False
    )
    console.print(info_panel)
    
    # Test keywords
    console.print("\n[bold]–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º:[/bold]\n")
    
    test_phrases = [
        "–£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ü–∏–∫–ª–∞",
        "–ö—Ç–æ-–Ω–∏–±—É–¥—å —Å–ª–µ–¥–∏—Ç –∑–∞ –ª—É–Ω–Ω—ã–º–∏ –¥–Ω—è–º–∏?",
        "–î–µ–≤–æ—á–∫–∏, –∫–∞–∫–∏–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –ø—Ä–∏ –ü–ú–°?",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫ –ª—É–Ω–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –∂–µ–Ω—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ",
        "–•–æ—á—É –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π —Ü–∏–∫–ª",
        "–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ª—É–Ω–Ω—ã–π –¥–µ–Ω—å?",
        "–ò—â—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∂–µ–Ω—Å–∫–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
    ]
    
    for phrase in test_phrases:
        words = phrase.lower().split()
        relevant = get_relevant_features(words)
        is_target = is_relevant_to_audience(phrase)
        
        console.print(f"[yellow]–§—Ä–∞–∑–∞:[/yellow] {phrase}")
        console.print(f"[green]–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:[/green] {', '.join(relevant.keys()) if relevant else '–ù–µ—Ç'}")
        console.print(f"[blue]–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:[/blue] {'–î–∞' if is_target else '–ù–µ—Ç'}")
        
        if relevant:
            mention = generate_natural_mention(context_words=words)
            console.print(f"[magenta]–ü—Ä–∏–º–µ—Ä —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:[/magenta] {mention}")
        console.print()
    
    # Show all features
    console.print("\n[bold]–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:[/bold]\n")
    
    features_table = Table(title="–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å Moon Temple Bot")
    features_table.add_column("–§—É–Ω–∫—Ü–∏—è", style="cyan", width=25)
    features_table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="green", width=50)
    features_table.add_column("–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞", style="yellow", width=40)
    
    for feature_key, feature_data in context['main_features'].items():
        features_table.add_row(
            feature_key.replace('_', ' ').title(),
            feature_data['description'],
            feature_data['benefits']
        )
    
    console.print(features_table)
    
    # Generate sample mentions
    console.print("\n[bold]–ü—Ä–∏–º–µ—Ä—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:[/bold]\n")
    
    topics = ["—Ü–∏–∫–ª", "–ª—É–Ω–∞", "–º–µ–¥–∏—Ç–∞—Ü–∏—è", "–∂–µ–Ω—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–∞—Å—Ç—Ä–æ–ª–æ–≥–∏—è"]
    
    for topic in topics:
        mention = generate_natural_mention(topic)
        console.print(f"[cyan]–¢–µ–º–∞ '{topic}':[/cyan] {mention}")
    
    # Random mentions
    console.print("\n[bold]–°–ª—É—á–∞–π–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:[/bold]\n")
    for i in range(5):
        mention = generate_natural_mention()
        console.print(f"{i+1}. {mention}")


if __name__ == "__main__":
    try:
        test_context()
    except Exception as e:
        console.print(f"\n[red]–û—à–∏–±–∫–∞: {e}[/red]")
        import traceback
        traceback.print_exc()
